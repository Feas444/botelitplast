import logging
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
)
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ db.py –∏ config.py –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
from db import (
    get_role, get_all_users, get_user_by_id,
    get_all_emails, insert_email, delete_email, mark_email_read,
    get_unread_emails, get_read_emails, get_all_tests, insert_test
)
from config import DEVELOPER_USERNAME, ROLES

logger = logging.getLogger(__name__)

########################################
# –°–æ—Å—Ç–æ—è–Ω–∏—è (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã)
########################################

MAIL_MENU = 100

# --- –†–∞—Å—Å—ã–ª–∫–∞ –≥—Ä—É–ø–ø–µ ---
MAIL_GROUP_CHOOSE_ROLE = 110
MAIL_GROUP_SUBJECT = 111
MAIL_GROUP_BODY = 112
MAIL_GROUP_ATTACHMENT = 113
MAIL_GROUP_CHOOSE_TEST = 114
MAIL_GROUP_PREVIEW = 115

# --- –†–∞—Å—Å—ã–ª–∫–∞ –æ–¥–Ω–æ–º—É ---
MAIL_ONE_CHOOSEUSER = 120
MAIL_ONE_SUBJECT = 121
MAIL_ONE_BODY = 122
MAIL_ONE_ATTACHMENT = 123
MAIL_ONE_ATTACH_TEST = 125
MAIL_ONE_PREVIEW = 124

# --- –¢–µ—Å—Ç—ã ---
TEST_MENU = 310
TEST_CREATE_MENU = 311
TEST_CREATE_HEADER = 312
TEST_CREATE_LINK = 313
TEST_CREATE_CONFIRM = 314

# --- ¬´–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è¬ª (–∞–¥–º–∏–Ω) ---
MAIL_ALL_ROLES = 410
MAIL_ALL_LIST = 411

########################################
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
########################################

def is_admin_or_dev(query: CallbackQuery) -> bool:
    role = (get_role(query.from_user.id) or "").lower()
    dev_name = (query.from_user.username or "").lower()
    return (role in ("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ø–æ–º–æ—â–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞")) or (dev_name == DEVELOPER_USERNAME.lower())

async def safe_edit_menu(query: CallbackQuery, text: str, markup=None):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑–±–µ–≥–∞—è –æ—à–∏–±–∫–∏ ¬´Message is not modified¬ª.
    –ü—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
    """
    from telegram.error import BadRequest
    try:
        await query.edit_message_text(text=text, reply_markup=markup)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            return
        try:
            await query.message.delete()
        except:
            pass
        if markup:
            await query.message.chat.send_message(text, reply_markup=markup)
        else:
            await query.message.chat.send_message(text)

async def safe_edit_or_send(update, context, text: str, reply_markup=None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ï—Å–ª–∏ update ‚Äì —ç—Ç–æ CallbackQuery, –±–µ—Ä—ë–º chat_id –∏–∑ query.message.chat.id.
    –ï—Å–ª–∏ update ‚Äì —ç—Ç–æ –æ–±—ã—á–Ω—ã–π Update —Å update.message, –±–µ—Ä—ë–º update.effective_chat.id.
    """
    bot = context.bot

    if isinstance(update, CallbackQuery):
        # update ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç CallbackQuery
        query = update
        chat_id = query.message.chat.id
        try:
            await query.edit_message_text(text=text, reply_markup=reply_markup)
            context.user_data["last_bot_msg_id"] = query.message.message_id
        except Exception:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
            try:
                await query.message.delete()
            except:
                pass
            msg = await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
            context.user_data["last_bot_msg_id"] = msg.message_id

    elif hasattr(update, 'message') and update.message:
        # update ‚Äî —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç Update —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        chat_id = update.effective_chat.id
        last_bot_msg_id = context.user_data.get("last_bot_msg_id")
        if last_bot_msg_id:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=last_bot_msg_id,
                    text=text,
                    reply_markup=reply_markup
                )
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ ‚Äî —É–¥–∞–ª—è–µ–º/—à–ª—ë–º –Ω–æ–≤–æ–µ
                msg = await bot.send_message(chat_id, text, reply_markup=reply_markup)
                context.user_data["last_bot_msg_id"] = msg.message_id
        else:
            # –ù–µ—Ç ¬´—Å—Ç–∞—Ä–æ–≥–æ¬ª —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            msg = await bot.send_message(chat_id, text, reply_markup=reply_markup)
            context.user_data["last_bot_msg_id"] = msg.message_id

    else:
        # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ —Ç—Ä–µ—Ç—å–µ
        raise ValueError("safe_edit_or_send: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø update (CallbackQuery –∏–ª–∏ message).")


def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ / –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ / —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
    kb = [
        [InlineKeyboardButton("üìÅ –û–±—â–∏–µ —Ñ–∞–π–ª—ã", callback_data="files_obshaya"),
         InlineKeyboardButton("üìÅ –§–∞–π–ª—ã —Ä–∞–±–æ—Ç—ã", callback_data="files_role")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_files"),
         InlineKeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", callback_data="mail_main")],
        [InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    return InlineKeyboardMarkup(kb)

def get_user_keyboard(role: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    kb = [
        [InlineKeyboardButton("üìÅ –û–±—â–∏–µ —Ñ–∞–π–ª—ã", callback_data="files_obshaya"),
         InlineKeyboardButton("üìÅ –§–∞–π–ª—ã —Ä–∞–±–æ—Ç—ã", callback_data="files_role")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_files"),
         InlineKeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", callback_data="mail_main")]
    ]
    return InlineKeyboardMarkup(kb)

async def return_to_global_menu(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ—á—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –í—ã—Ö–æ–¥–∏–º –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é:
    - –ê–¥–º–∏–Ω-–º–µ–Ω—é, –µ—Å–ª–∏ —Ä–æ–ª—å=–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/–ø–æ–º–æ—â–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏–ª–∏ dev
    - –ò–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
    """
    from telegram.ext import ConversationHandler
    user_id = query.from_user.id
    role = (get_role(user_id) or "").lower()
    dev_name = (query.from_user.username or "").lower()
    if role in ("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ø–æ–º–æ—â–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞") or dev_name == DEVELOPER_USERNAME.lower():
        text = f"üí¨ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π.\n–ê–¥–º–∏–Ω-–º–µ–Ω—é (—Ä–æ–ª—å: {role})"
        markup = get_admin_keyboard()
    else:
        text = f"üí¨ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π.\n–ú–µ–Ω—é –¥–ª—è —Ä–æ–ª–∏: {role}"
        markup = get_user_keyboard(role)
    await query.edit_message_text(text, reply_markup=markup)
    return ConversationHandler.END

########################################
# 1) –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ¬´–°–æ–æ–±—â–µ–Ω–∏–π¬ª
########################################

async def mail_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ—á—Ç—É: /mail –∏–ª–∏ callback_data='mail_main'.
    """
    chat_id = update.effective_chat.id
    attach_id = context.user_data.pop("current_attachment_msg_id", None)
    if attach_id:
        try:
            await update.effective_message.bot.delete_message(chat_id, attach_id)
        except:
            pass

    if update.callback_query:
        query = update.callback_query
        await query.answer()

    user_id = update.effective_user.id
    role = (get_role(user_id) or "").lower()
    dev_name = (update.effective_user.username or "").lower()
    can_admin = (role in ("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ø–æ–º–æ—â–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞")) or (dev_name == DEVELOPER_USERNAME.lower())

    kb = [
        [InlineKeyboardButton("üì• –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", callback_data="mail_unread"),
         InlineKeyboardButton("üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", callback_data="mail_read")],
        [InlineKeyboardButton("üìù –¢–µ—Å—Ç—ã", callback_data="mail_tests")]
    ]
    if can_admin:
        kb.append([
            InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="mail_send_msg"),
            InlineKeyboardButton("üìÇ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="mail_all")
        ])
    kb.append([InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="mail_exit")])
    markup = InlineKeyboardMarkup(kb)

    text = "üí¨ –ú–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π"
    if update.callback_query:
        await safe_edit_menu(update.callback_query, text, markup)
    else:
        await safe_edit_or_send(update, context, text, markup)
    return MAIL_MENU

async def mail_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–æ—á—Ç—ã (MAIL_MENU)."""
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "mail_exit":
        return await return_to_global_menu(query, context)
    elif data == "mail_unread":
        return await show_unread_inbox(query, context)
    elif data == "mail_read":
        return await show_read_inbox(query, context)
    elif data == "mail_tests":
        return await show_tests_menu(update, context)
    elif data == "mail_all":
        return await mail_all_roles(query, context)  # ¬´–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è¬ª
    elif data == "mail_send_msg":
        kb = [
            [InlineKeyboardButton("üë• –ì—Ä—É–ø–ø–µ", callback_data="mail_send_group"),
             InlineKeyboardButton("üë§ –û–¥–Ω–æ–º—É", callback_data="mail_send_one")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]
        ]
        await safe_edit_menu(query, "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", InlineKeyboardMarkup(kb))
        return MAIL_MENU
    elif data == "mail_send_group":
        return await start_mail_sending_group(query, context)
    elif data == "mail_send_one":
        return await start_mail_sending_one(query, context)
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return MAIL_MENU

########################################
# 2) –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ/–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
########################################

async def show_unread_inbox(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    mails = get_unread_emails(user_id)  # [(mail_id, subj, body, att, test_id), ...]
    if not mails:
        kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]]
        await safe_edit_menu(query, "üì™ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.", InlineKeyboardMarkup(kb))
    else:
        kb = []
        for (m_id, s, b, a, t) in mails:
            kb.append([InlineKeyboardButton(s, callback_data=f"unread_mail:{m_id}")])
        kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")])
        await safe_edit_menu(query, "üì¨ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", InlineKeyboardMarkup(kb))
    return MAIL_MENU

async def open_unread_mail_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # data: "unread_mail:<mail_id>"
    _, mail_id_str = query.data.split(":", 1)
    mail_id = int(mail_id_str)
    # –ò—â–µ–º –ø–∏—Å—å–º–æ —Å—Ä–µ–¥–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    all_unread = get_unread_emails(query.from_user.id)
    found = None
    for (m_id, s, b, a, t_id) in all_unread:
        if m_id == mail_id:
            found = (s, b, a, t_id)
            break
    if not found:
        await safe_edit_menu(query, "üì™ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ.")
        return MAIL_MENU

    subj, bod, att, test_id = found
    text = f"üìß –¢–µ–º–∞: {subj}\n\n{bod}"

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è
    if att:
        from telegram.error import BadRequest
        try:
            sent = await query.message.reply_document(att)
            context.user_data["current_attachment_msg_id"] = sent.message_id
            text += "\n(üìé –í–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç)"
        except BadRequest as e:
            if "can't use file of type photo as document" in str(e).lower():
                sent = await query.message.reply_photo(att)
                context.user_data["current_attachment_msg_id"] = sent.message_id
                text += "\n(üñº –í–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–æ—Ç–æ)"
            else:
                text += f"\n(–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è: {e})"

    kb = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data=f"mark_read:{mail_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_unread")]
    ]
    await safe_edit_menu(query, text, InlineKeyboardMarkup(kb))
    return MAIL_MENU

from db import cursor, get_all_tests, mark_email_read

async def mark_read_handler(update, context):
    query = update.callback_query
    await query.answer()
    _, mail_id_str = query.data.split(":", 1)
    mail_id = int(mail_id_str)

    # 1. –£–∑–Ω–∞—ë–º, –µ—Å—Ç—å –ª–∏ test_id —É —ç—Ç–æ–≥–æ –ø–∏—Å—å–º–∞
    cursor.execute("SELECT test_id FROM emails WHERE id=?", (mail_id,))
    row = cursor.fetchone()
    test_id = row[0] if row else None

    # 2. –ü–æ–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º
    mark_email_read(mail_id)

    # 3. –£–¥–∞–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    attach_id = context.user_data.pop("current_attachment_msg_id", None)
    if attach_id:
        try:
            await query.message.bot.delete_message(query.message.chat_id, attach_id)
        except:
            pass

    # 4. –ï—Å–ª–∏ –ø–∏—Å—å–º–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É —Å URL (—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
    if test_id:
        all_tests = get_all_tests()  # [(id, header, link, for_group, role, user_id, attach_id), ...]
        found = None
        for (tid, header, link, fg, rl, uid, attach_id) in all_tests:
            if tid == test_id:
                found = (header, link)
                break
        
        if found:
            header, link = found
            text = (
                "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ.\n"
                f"–£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç: ¬´{header}¬ª\n\n"
                f"–°—Å—ã–ª–∫–∞: {link}"
            )
            # –ö–Ω–æ–ø–∫–∞ —Å url=... —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É
            kb = [
                [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç", url=link)],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="mail_main")]
            ]
            await safe_edit_menu(query, text, InlineKeyboardMarkup(kb))
        else:
            kb = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="mail_main")]]
            await safe_edit_menu(query, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ. –ù–æ —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.", InlineKeyboardMarkup(kb))
    else:
        kb = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="mail_main")]]
        await safe_edit_menu(query, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ.", InlineKeyboardMarkup(kb))

    return MAIL_MENU

async def back_unread_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await show_unread_inbox(query, context)

async def show_read_inbox(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    mails = get_read_emails(user_id)  # [(mail_id, subj, body, att, test_id), ...]
    if not mails:
        kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]]
        await safe_edit_menu(query, "üì™ –ù–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.", InlineKeyboardMarkup(kb))
    else:
        kb = []
        for (m_id, s, b, a, t) in mails:
            kb.append([InlineKeyboardButton(s, callback_data=f"read_mail:{m_id}")])
        kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")])
        await safe_edit_menu(query, "üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", InlineKeyboardMarkup(kb))
    return MAIL_MENU

async def open_read_mail_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # data –≤–∏–¥–∞ "read_mail:<mail_id>"
    _, mail_id_str = query.data.split(":", 1)
    mail_id = int(mail_id_str)

    # –ò—â–µ–º –ø–∏—Å—å–º–æ —Å—Ä–µ–¥–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    all_read = get_read_emails(query.from_user.id)
    found = None
    for (m_id, subj, bod, att, test_id) in all_read:
        if m_id == mail_id:
            found = (subj, bod, att, test_id)
            break

    if not found:
        await safe_edit_menu(query, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return MAIL_MENU

    subj, bod, att, test_id = found
    text = f"üìß –¢–µ–º–∞: {subj}\n\n{bod}"

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è
    if att:
        from telegram.error import BadRequest
        try:
            sent = await query.message.reply_document(att)
            context.user_data["current_attachment_msg_id"] = sent.message_id
            text += "\n(üìé –í–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç)"
        except BadRequest as e:
            if "can't use file of type photo as document" in str(e).lower():
                sent = await query.message.reply_photo(att)
                context.user_data["current_attachment_msg_id"] = sent.message_id
                text += "\n(üñº –í–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–æ—Ç–æ)"
            else:
                text += f"\n(–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è: {e})"

    kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_read")]]
    await safe_edit_menu(query, text, InlineKeyboardMarkup(kb))
    return MAIL_MENU

async def back_read_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–ù–∞–∑–∞–¥¬ª –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
    –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    query = update.callback_query
    await query.answer()
    return await show_read_inbox(query, context)

########################################
# 3) ¬´–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è¬ª (–∞–¥–º–∏–Ω)
########################################

async def mail_all_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(update, CallbackQuery):
        query = update
    else:
        query = update.callback_query
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å query.from_user.id –∏ —Ç.–¥.
    if not is_admin_or_dev(query):
        await safe_edit_menu(query, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return MAIL_MENU
    all_list = get_all_emails()
    if not all_list:
        kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]]
        await safe_edit_menu(query, "üì™ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.", InlineKeyboardMarkup(kb))
        return MAIL_MENU

    role_to_mails = {}
    for (m_id, rec, s, b, st, a, t_id) in all_list:
        info = get_user_by_id(rec)
        if not info:
            role_to_mails.setdefault("–ë–µ–∑ —Ä–æ–ª–∏", []).append((m_id, rec, s, b, st, a, t_id))
        else:
            r = info[2] or "–ë–µ–∑ —Ä–æ–ª–∏"
            role_to_mails.setdefault(r, []).append((m_id, rec, s, b, st, a, t_id))

    kb = []
    for r, mails in role_to_mails.items():
        if mails:
            kb.append([InlineKeyboardButton(f"{r} ({len(mails)})", callback_data=f"mail_all_group:{r}")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")])
    await safe_edit_menu(query, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë –ø–∏—Å—å–º–∞:", InlineKeyboardMarkup(kb))
    return MAIL_ALL_ROLES

async def mail_all_choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, chosen_role = query.data.split(":", 1)
    all_list = get_all_emails()
    relevant = []
    for (m_id, rec, s, b, st, a, t_id) in all_list:
        info = get_user_by_id(rec)
        if info:
            if info[2] == chosen_role:
                relevant.append((m_id, rec, s, b, st, a, t_id))
        else:
            if chosen_role == "–ë–µ–∑ —Ä–æ–ª–∏":
                relevant.append((m_id, rec, s, b, st, a, t_id))
    if not relevant:
        kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_all")]]
        await query.edit_message_text(f"–£ —Ä–æ–ª–∏ '{chosen_role}' –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=InlineKeyboardMarkup(kb))
        return MAIL_ALL_ROLES

    context.user_data["mail_all_chosen_role"] = chosen_role
    kb = []
    for (m_id, rec, subj, bod, st, att, test_id) in relevant:
        preview = f"{subj} | {bod[:20]}..."
        kb.append([
            InlineKeyboardButton(preview, callback_data=f"mail_all_view:{m_id}"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"mail_all_del:{m_id}")
        ])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_all")])
    await query.edit_message_text(f"–ü–∏—Å—å–º–∞ –¥–ª—è —Ä–æ–ª–∏ '{chosen_role}':", reply_markup=InlineKeyboardMarkup(kb))
    return MAIL_ALL_LIST

async def mail_all_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, mail_id_str = query.data.split(":", 1)
    mail_id = int(mail_id_str)
    all_list = get_all_emails()
    found = None
    for (m_id, rec, s, b, st, a, t_id) in all_list:
        if m_id == mail_id:
            found = (s, b, a, t_id)
            break
    if not found:
        await query.edit_message_text("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return MAIL_ALL_LIST
    subj, bod, att, test_id = found
    text = f"üìß –¢–µ–º–∞: {subj}\n\n{bod}"
    kb = [
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"mail_all_del:{mail_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_all_back")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb))
    return MAIL_ALL_LIST

async def mail_all_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, mail_id_str = query.data.split(":", 1)
    mail_id = int(mail_id_str)
    delete_email(mail_id)
    kb = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="mail_all_refresh")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_all_back")]
    ]
    await query.edit_message_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ {mail_id} —É–¥–∞–ª–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup(kb))
    return MAIL_ALL_LIST

async def mail_all_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chosen_role = context.user_data.get("mail_all_chosen_role", "–ë–µ–∑ —Ä–æ–ª–∏")
    all_list = get_all_emails()
    relevant = []
    for (m_id, rec, s, b, st, a, t_id) in all_list:
        info = get_user_by_id(rec)
        if info:
            if info[2] == chosen_role:
                relevant.append((m_id, rec, s, b, st, a, t_id))
        else:
            if chosen_role == "–ë–µ–∑ —Ä–æ–ª–∏":
                relevant.append((m_id, rec, s, b, st, a, t_id))
    if not relevant:
        kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_all")]]
        await query.edit_message_text(f"–£ —Ä–æ–ª–∏ '{chosen_role}' –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=InlineKeyboardMarkup(kb))
        return MAIL_ALL_ROLES

    kb = []
    for (m_id, rec, subj, bod, st, att, test_id) in relevant:
        preview = f"{subj} | {bod[:20]}..."
        kb.append([
            InlineKeyboardButton(preview, callback_data=f"mail_all_view:{m_id}"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"mail_all_del:{m_id}")
        ])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_all")])
    await query.edit_message_text(f"–ü–∏—Å—å–º–∞ –¥–ª—è —Ä–æ–ª–∏ '{chosen_role}':", reply_markup=InlineKeyboardMarkup(kb))
    return MAIL_ALL_LIST

async def mail_all_refresh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await mail_all_back(update, context)

########################################
# 4) –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø–µ
########################################

async def start_mail_sending_group(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin_or_dev(query):
        await safe_edit_menu(query, "–ù–µ—Ç –ø—Ä–∞–≤!")
        return MAIL_MENU
    for k in ["mail_group_role", "mail_group_subject", "mail_group_body", "mail_group_attachment", "mail_group_test_id"]:
        context.user_data.pop(k, None)
    kb = [[InlineKeyboardButton("üåê –í—Å–µ", callback_data="group_role:ALL")]]
    for r in ROLES:
        kb.append([InlineKeyboardButton(r, callback_data=f"group_role:{r}")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")])
    await safe_edit_menu(query, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–∏–ª–∏ ALL):", InlineKeyboardMarkup(kb))
    return MAIL_GROUP_CHOOSE_ROLE

async def mail_group_role_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, chosen_role = query.data.split("group_role:", 1)
    context.user_data["mail_group_role"] = chosen_role

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–≤–≤–æ–¥ —Ç–µ–º—ã) —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.user_data["last_bot_msg_id"] = query.message.message_id

    kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]]
    text = f"üîñ –†–æ–ª—å: {chosen_role}\n\n–í–≤–µ–¥–∏—Ç–µ –¢–ï–ú–£ —Å–æ–æ–±—â–µ–Ω–∏—è:"
    await safe_edit_or_send(query, context, text, InlineKeyboardMarkup(kb))
    return MAIL_GROUP_SUBJECT



async def mail_group_subject_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subj = update.message.text.strip()
    context.user_data["mail_group_subject"] = subj

    kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]]
    text = f"üí¨ –¢–µ–º–∞: {subj}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
    await safe_edit_or_send(update, context, text, InlineKeyboardMarkup(kb))
    return MAIL_GROUP_BODY




async def mail_group_body_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bod = update.message.text.strip()
    context.user_data["mail_group_body"] = bod
    kb = [
        [InlineKeyboardButton("üìù –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ—Å—Ç", callback_data="mail_group_attach_test"),
         InlineKeyboardButton("‚õî –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ", callback_data="mail_group_skipfile")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]
    ]
    await safe_edit_or_send(update, context, f"üí¨ –¢–µ–∫—Å—Ç:\n{bod}\n\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ—Å—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å?", InlineKeyboardMarkup(kb))
    return MAIL_GROUP_ATTACHMENT

async def mail_group_attach_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tests = get_all_tests()
    kb = []
    if tests:
        for (tid, header, link, fg, rl, uid, attach_id) in tests:
            kb.append([InlineKeyboardButton(f"üìù {header}", callback_data=f"test_select:{tid}")])
    else:
        kb.append([InlineKeyboardButton("üö´ –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ", callback_data="test_none")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_group_body_back")])
    await safe_edit_or_send(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è:", InlineKeyboardMarkup(kb))
    return MAIL_GROUP_CHOOSE_TEST

async def mail_group_test_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, test_id_str = query.data.split(":",1)
    context.user_data["mail_group_test_id"] = int(test_id_str)

    # –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ä–∞–Ω–µ–µ
    bod = context.user_data.get("mail_group_body", "")
    text = (
        f"üìù –¢–µ—Å—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω!\n\n"
        f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{bod}\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª."
    )

    kb = [
        [InlineKeyboardButton("‚õî –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="mail_group_skipfile")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]
    ]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ –∂–µ ¬´—à–∞–≥ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è¬ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ª–∏–±–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–∞–π–ª, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    await safe_edit_or_send(update, context, text, InlineKeyboardMarkup(kb))
    return MAIL_GROUP_ATTACHMENT


    return MAIL_GROUP_ATTACHMENT

async def mail_group_skipfile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["mail_group_attachment"] = None
    return await mail_group_show_preview(query, context)

async def mail_group_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.document:
        context.user_data["mail_group_attachment"] = update.message.document.file_id
    elif update.message.photo:
        context.user_data["mail_group_attachment"] = update.message.photo[-1].file_id
    else:
        await safe_edit_or_send(update, context, "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ –∏–ª–∏ ¬´‚õî –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
        return MAIL_GROUP_ATTACHMENT
    return await mail_group_show_preview(update, context)

async def mail_group_show_preview(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    query = update_or_query if isinstance(update_or_query, CallbackQuery) else None
    role_name = context.user_data.get("mail_group_role", "")
    subj = context.user_data.get("mail_group_subject", "")
    bod = context.user_data.get("mail_group_body", "")
    att = context.user_data.get("mail_group_attachment", None)
    test_id = context.user_data.get("mail_group_test_id", None)
    text_caption = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ: {role_name}\n–¢–µ–º–∞: {subj}\n\n{bod}"
    if test_id:
        for (tid, header, link, fg, rl, uid, attach_id) in get_all_tests():
            if tid == test_id:
                text_caption += f"\n\nüìù –ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω —Ç–µ—Å—Ç:\n¬´{header}¬ª\nüîó {link}"
                break
    kb = [
    [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å!", callback_data="mail_group_send")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]
    ]

    if query:
        await safe_edit_menu(query, text_caption, InlineKeyboardMarkup(kb))
    else:
        await safe_edit_or_send(update_or_query, context, text_caption, InlineKeyboardMarkup(kb))
    return MAIL_GROUP_PREVIEW

async def mail_group_send_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    role_name = context.user_data.get("mail_group_role", "")
    subj = context.user_data.get("mail_group_subject", "")
    bod = context.user_data.get("mail_group_body", "")
    att = context.user_data.get("mail_group_attachment", None)
    test_id = context.user_data.get("mail_group_test_id", None)

    all_u = get_all_users()
    if role_name == "ALL":
        for (tid, nm, un, rl) in all_u:
            insert_email(tid, subj, bod, att, test_id)
            try:
                await context.bot.send_message(tid, text=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–¢–µ–º–∞: {subj}")
            except:
                pass
    else:
        for (tid, nm, un, rl) in all_u:
            if rl == role_name:
                insert_email(tid, subj, bod, att, test_id)
                try:
                    await context.bot.send_message(tid, text=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–¢–µ–º–∞: {subj}")
                except:
                    pass
    for k in ["mail_group_role", "mail_group_subject", "mail_group_body", "mail_group_attachment", "mail_group_test_id"]:
        context.user_data.pop(k, None)
    await safe_edit_menu(query, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥—Ä—É–ø–ø–µ: {role_name}!")
    return MAIL_MENU



async def mail_group_body_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    bod = context.user_data.get("mail_group_body", "")
    kb = [
        [InlineKeyboardButton("üìù –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ—Å—Ç", callback_data="mail_group_attach_test"),
         InlineKeyboardButton("‚õî –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ", callback_data="mail_group_skipfile")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]
    ]
    text = f"üí¨ –¢–µ–∫—Å—Ç:\n{bod}\n\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ—Å—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å?"
    await safe_edit_menu(query, text, InlineKeyboardMarkup(kb))
    return MAIL_GROUP_ATTACHMENT

########################################
# 5) –†–∞—Å—Å—ã–ª–∫–∞ –æ–¥–Ω–æ–º—É
########################################

async def start_mail_sending_one(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin_or_dev(query):
        await safe_edit_menu(query, "–ù–µ—Ç –ø—Ä–∞–≤!")
        return MAIL_MENU
    for k in ["mail_one_recipient", "mail_one_subject", "mail_one_body", "mail_one_attachment", "mail_one_test_id"]:
        context.user_data.pop(k, None)

    usrs = get_all_users()
    kb = []
    for (tid, nm, un, rl) in usrs:
        if tid == query.from_user.id:
            continue
        text_btn = f"{nm} (@{un}) - {rl}"
        kb.append([InlineKeyboardButton(text_btn, callback_data=f"mail_one_user:{tid}")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")])
    await safe_edit_menu(query, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", InlineKeyboardMarkup(kb))
    return MAIL_ONE_CHOOSEUSER

async def mail_one_user_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, tid_str = query.data.split("mail_one_user:", 1)
    rid = int(tid_str)
    context.user_data["mail_one_recipient"] = rid

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–≤–≤–æ–¥ —Ç–µ–º—ã) —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.user_data["last_bot_msg_id"] = query.message.message_id

    mk = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]])
    text = f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {rid}\n\n–í–≤–µ–¥–∏—Ç–µ –¢–ï–ú–£ —Å–æ–æ–±—â–µ–Ω–∏—è:"
    await safe_edit_or_send(query, context, text, mk)
    return MAIL_ONE_SUBJECT


async def mail_one_subject_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–¥–µ—Å—å —É–∂–µ user_data["last_bot_msg_id"] —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    # –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ mail_one_user_chosen
    subj = update.message.text.strip()
    context.user_data["mail_one_subject"] = subj

    kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]]
    text = f"üí¨ –¢–µ–º–∞: {subj}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
    await safe_edit_or_send(update, context, text, InlineKeyboardMarkup(kb))
    return MAIL_ONE_BODY



async def mail_one_body_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bod = update.message.text.strip()
    context.user_data["mail_one_body"] = bod
    kb = [
        [InlineKeyboardButton("üìù –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ—Å—Ç", callback_data="mail_one_attach_test"),
         InlineKeyboardButton("‚õî –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ", callback_data="mail_one_skipfile")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]
    ]
    await safe_edit_or_send(update, context, f"üí¨ –¢–µ–∫—Å—Ç:\n{bod}\n\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ—Å—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å?", InlineKeyboardMarkup(kb))
    return MAIL_ONE_ATTACHMENT

async def mail_one_attach_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tests = get_all_tests()
    kb = []
    if tests:
        for (tid, header, link, fg, role, uid, attach_id) in tests:
            kb.append([InlineKeyboardButton(f"üìù {header}", callback_data=f"test_select_one:{tid}")])
    else:
        kb.append([InlineKeyboardButton("üö´ –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤", callback_data="test_none")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_one_body_back")])
    await safe_edit_or_send(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è:", InlineKeyboardMarkup(kb))
    return MAIL_ONE_ATTACH_TEST

async def mail_one_test_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, test_id_str = query.data.split(":",1)
    context.user_data["mail_one_test_id"] = int(test_id_str)

    bod = context.user_data.get("mail_one_body", "")
    text = (
        f"üìù –¢–µ—Å—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω!\n\n"
        f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{bod}\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª."
    )

    kb = [
        [InlineKeyboardButton("‚õî –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="mail_one_skipfile")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]
    ]

    await safe_edit_or_send(update, context, text, InlineKeyboardMarkup(kb))
    return MAIL_ONE_ATTACHMENT


async def mail_one_skipfile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["mail_one_attachment"] = None
    return await mail_one_show_preview(query, context)

async def mail_one_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.document:
        context.user_data["mail_one_attachment"] = update.message.document.file_id
    elif update.message.photo:
        context.user_data["mail_one_attachment"] = update.message.photo[-1].file_id
    else:
        await safe_edit_or_send(update, context, "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ –∏–ª–∏ ¬´‚õî –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
        return MAIL_ONE_ATTACHMENT
    return await mail_one_show_preview(update, context)

async def mail_one_show_preview(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    query = update_or_query if isinstance(update_or_query, CallbackQuery) else None
    rid = context.user_data.get("mail_one_recipient")
    subj = context.user_data.get("mail_one_subject", "")
    bod = context.user_data.get("mail_one_body", "")
    att = context.user_data.get("mail_one_attachment", None)
    test_id = context.user_data.get("mail_one_test_id", None)
    text_caption = f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {rid}\nüí¨ –¢–µ–º–∞: {subj}\n\n{bod}"
    if test_id:
        for (tid, header, link, fg, rl, uid, attach_id) in get_all_tests():
            if tid == test_id:
                text_caption += f"\n\nüìù –ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω —Ç–µ—Å—Ç:\n¬´{header}¬ª\nüîó {link}"
                break
    kb = [
    [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å!", callback_data="mail_one_send")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]
    ]

    if query:
        await safe_edit_menu(query, text_caption, InlineKeyboardMarkup(kb))
    else:
        await safe_edit_or_send(update_or_query, context, text_caption, InlineKeyboardMarkup(kb))
    return MAIL_ONE_PREVIEW

async def mail_one_send_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    rid = context.user_data.get("mail_one_recipient")
    subj = context.user_data.get("mail_one_subject", "")
    bod = context.user_data.get("mail_one_body", "")
    att = context.user_data.get("mail_one_attachment", None)
    test_id = context.user_data.get("mail_one_test_id", None)
    insert_email(rid, subj, bod, att, test_id)
    try:
        await context.bot.send_message(chat_id=rid, text=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–¢–µ–º–∞: {subj}")
    except:
        pass
    for k in ["mail_one_recipient", "mail_one_subject", "mail_one_body", "mail_one_attachment", "mail_one_test_id"]:
        context.user_data.pop(k, None)
    await safe_edit_menu(query, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {rid}!")
    return MAIL_MENU


async def mail_one_body_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    bod = context.user_data.get("mail_one_body", "")
    kb = [
        [InlineKeyboardButton("üìù –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ—Å—Ç", callback_data="mail_one_attach_test"),
         InlineKeyboardButton("‚õî –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ", callback_data="mail_one_skipfile")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_main")]
    ]
    text = f"üí¨ –¢–µ–∫—Å—Ç:\n{bod}\n\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ—Å—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å?"
    await safe_edit_menu(query, text, InlineKeyboardMarkup(kb))
    return MAIL_ONE_ATTACHMENT

########################################
# 7) –¢–µ—Å—Ç—ã: –ø—Ä–æ—Å–º–æ—Ç—Ä/—É–¥–∞–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ
########################################

async def show_tests_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    role = (get_role(user_id) or "").lower()
    dev_name = (query.from_user.username or "").lower()
    can_admin = (role in ("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ø–æ–º–æ—â–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞")) or (dev_name == DEVELOPER_USERNAME.lower())

    if can_admin:
        tests = get_all_tests()
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∏—Å—å–º–∞, –≥–¥–µ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
        emails_unread = get_unread_emails(user_id)
        emails_read = get_read_emails(user_id)
        test_ids = set()
        for mail in emails_unread + emails_read:
            # mail: (id, subject, body, attachment, test_id)
            if mail[4]:
                test_ids.add(mail[4])
        tests = [test for test in get_all_tests() if test[0] in test_ids]

    kb = []
    if tests:
        for (tid, header, link, fg, rl, uid, attach_id) in tests:
            kb.append([InlineKeyboardButton(f"üìù {header}", callback_data=f"test_view:{tid}")])
    else:
        kb.append([InlineKeyboardButton("üö´ –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤", callback_data="test_none")])
    if can_admin:
        kb.append([InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", callback_data="test_create_menu")])
    kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="mail_main")])
    await query.edit_message_text("–ú–µ–Ω—é —Ç–µ—Å—Ç–æ–≤: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=InlineKeyboardMarkup(kb))
    return TEST_MENU

async def test_view_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, test_id_str = query.data.split(":", 1)
    test_id = int(test_id_str)
    all_t = get_all_tests()
    found = None
    for (tid, header, link, fg, rl, uid, attach_id) in all_t:
        if tid == test_id:
            found = (header, link, attach_id)
            break
    if not found:
        await query.edit_message_text("üö´ –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return TEST_MENU
    header, link, attach_id = found
    text = f"üìù –¢–µ—Å—Ç: {header}\nüîó –°—Å—ã–ª–∫–∞: {link}"
    kb = [[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç", url=link)]]
    if is_admin_or_dev(query):
        kb.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"test_delete:{test_id}")])
    kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="mail_main")])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb))
    return TEST_MENU

async def test_delete_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if not is_admin_or_dev(query):
        await query.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return TEST_MENU
    _, tid_str = query.data.split(":", 1)
    test_id = int(tid_str)
    from db import cursor, conn
    cursor.execute("DELETE FROM tests WHERE id=?", (test_id,))
    conn.commit()
    await query.edit_message_text(f"üóë –¢–µ—Å—Ç {test_id} —É–¥–∞–ª—ë–Ω.")
    return await show_tests_menu(update, context)

async def test_create_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    kb = [
        [InlineKeyboardButton("üë• –¢–µ—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã", callback_data="test_create_group"),
         InlineKeyboardButton("üë§ –¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="test_create_user")],
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", callback_data="test_create_storage")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mail_tests")]
    ]
    await query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=InlineKeyboardMarkup(kb))
    return TEST_CREATE_MENU

async def test_create_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["test_for_group"] = True
    context.user_data["test_role"] = None
    context.user_data["test_user_id"] = None
    kb = []
    for r in ROLES:
        kb.append([InlineKeyboardButton(r, callback_data=f"test_grp_role:{r}")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="test_create_menu")])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å (–≥—Ä—É–ø–ø–∞), –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–µ—Å—Ç:",
                                  reply_markup=InlineKeyboardMarkup(kb))
    return TEST_CREATE_MENU

async def test_grp_role_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, chosen_role = query.data.split("test_grp_role:", 1)
    context.user_data["test_role"] = chosen_role
    await query.edit_message_text(f"–†–æ–ª—å: {chosen_role}\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞:")
    return TEST_CREATE_HEADER

async def test_create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["test_for_group"] = False
    context.user_data["test_role"] = None
    context.user_data["test_user_id"] = None
    allu = get_all_users()
    kb = []
    for (tid, nm, un, rl) in allu:
        kb.append([InlineKeyboardButton(f"{nm} (@{un}) - {rl}", callback_data=f"test_usr:{tid}")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="test_create_menu")])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=InlineKeyboardMarkup(kb))
    return TEST_CREATE_MENU

async def test_usr_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, tid_str = query.data.split("test_usr:", 1)
    uid = int(tid_str)
    context.user_data["test_user_id"] = uid
    await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uid}\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞:")
    return TEST_CREATE_HEADER

async def test_create_storage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["test_for_group"] = False
    context.user_data["test_role"] = None
    context.user_data["test_user_id"] = None
    await query.edit_message_text("–¢–µ—Å—Ç –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
    return TEST_CREATE_HEADER

async def test_create_header_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    header = update.message.text.strip()
    context.user_data["test_header"] = header
    await safe_edit_or_send(update, context, f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {header}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç:")
    return TEST_CREATE_LINK

async def test_create_link_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    link = update.message.text.strip()
    context.user_data["test_link"] = link
    text = (f"–¢–µ—Å—Ç:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {context.user_data['test_header']}\n"
            f"–°—Å—ã–ª–∫–∞: {link}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ?")
    kb = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å", callback_data="test_create_confirm_yes"),
         InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="test_create_confirm_no")]
    ]
    await safe_edit_or_send(update, context, text, InlineKeyboardMarkup(kb))
    return TEST_CREATE_CONFIRM

async def test_create_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "test_create_confirm_no":
        for k in ["test_for_group", "test_role", "test_user_id", "test_header", "test_link"]:
            context.user_data.pop(k, None)
        await query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return await show_tests_menu(update, context)
    else:
        header = context.user_data.pop("test_header", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        link = context.user_data.pop("test_link", "")
        is_group = context.user_data.pop("test_for_group", False)
        role = context.user_data.pop("test_role", None)
        user_id = context.user_data.pop("test_user_id", None)
        insert_test(header, link, is_group, role, user_id)

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ä–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        new_all = get_all_tests()
        new_id = max(t[0] for t in new_all) if new_all else 1

        subj = f"–ù–æ–≤—ã–π —Ç–µ—Å—Ç: {header}"
        bod = f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ—Å—Ç ¬´{header}¬ª. –û—Ç–º–µ—Ç—å—Ç–µ –ø–∏—Å—å–º–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É."
        if is_group and role:
            for (tid, nm, un, rl) in get_all_users():
                if rl and rl.lower() == role.lower():
                    insert_email(tid, subj, bod, None, new_id)
        elif not is_group and user_id:
            insert_email(user_id, subj, bod, None, new_id)

        await query.edit_message_text(f"–¢–µ—Å—Ç ¬´{header}¬ª —Å–æ–∑–¥–∞–Ω!")
        return await show_tests_menu(update, context)

########################################
# ConversationHandler (–µ–¥–∏–Ω—ã–π)
########################################

from telegram.ext import ConversationHandler

mail_conv = ConversationHandler(
    entry_points=[
        CommandHandler("mail", mail_command),
        CallbackQueryHandler(mail_command, pattern="^mail_main$")
    ],
    states={
        MAIL_MENU: [
            CallbackQueryHandler(mail_menu_handler,
                pattern="^(mail_unread|mail_read|mail_tests|mail_all|mail_send_msg|mail_exit|mail_main|mail_send_group|mail_send_one)$"),
            CallbackQueryHandler(open_unread_mail_handler, pattern="^unread_mail:"),
            CallbackQueryHandler(mark_read_handler, pattern="^mark_read:"),
            CallbackQueryHandler(back_unread_handler, pattern="^back_unread$"),
            CallbackQueryHandler(open_read_mail_handler, pattern="^read_mail:"),
            CallbackQueryHandler(back_read_handler, pattern="^back_read$")
        ],

        # ¬´–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è¬ª
        MAIL_ALL_ROLES: [
            CallbackQueryHandler(mail_all_choose_role, pattern="^mail_all_group:"),
            CallbackQueryHandler(return_to_global_menu, pattern="^mail_main$")
        ],
        MAIL_ALL_LIST: [
            CallbackQueryHandler(mail_all_view, pattern="^mail_all_view:"),
            CallbackQueryHandler(mail_all_delete, pattern="^mail_all_del:"),
            CallbackQueryHandler(mail_all_back, pattern="^mail_all_back$"),
            CallbackQueryHandler(mail_all_refresh, pattern="^mail_all_refresh$"),
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ¬´–ù–∞–∑–∞–¥¬ª (callback_data="mail_all"):
            CallbackQueryHandler(mail_all_roles, pattern="^mail_all$"),

            CallbackQueryHandler(return_to_global_menu, pattern="^mail_main$")
        ],

        # –†–∞—Å—Å—ã–ª–∫–∞ –≥—Ä—É–ø–ø–µ
        MAIL_GROUP_CHOOSE_ROLE: [
            CallbackQueryHandler(mail_group_role_handler, pattern="^group_role:"),
            CallbackQueryHandler(mail_command, pattern="^mail_main$")
        ],
        MAIL_GROUP_SUBJECT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, mail_group_subject_handler),
            CallbackQueryHandler(mail_command, pattern="^mail_main$")
        ],
        MAIL_GROUP_BODY: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, mail_group_body_handler),
            CallbackQueryHandler(mail_command, pattern="^mail_main$")
        ],
        MAIL_GROUP_ATTACHMENT: [
            MessageHandler(filters.Document.ALL | filters.PHOTO, mail_group_file_handler),
            CallbackQueryHandler(mail_group_skipfile, pattern="^mail_group_skipfile$"),
            CallbackQueryHandler(mail_group_attach_test, pattern="^mail_group_attach_test$"),
            CallbackQueryHandler(mail_command, pattern="^mail_main$")
        ],
        MAIL_GROUP_CHOOSE_TEST: [
            CallbackQueryHandler(mail_group_test_selected, pattern="^test_select:"),
            CallbackQueryHandler(mail_group_body_back, pattern="^mail_group_body_back$")
        ],
        MAIL_GROUP_PREVIEW: [
            CallbackQueryHandler(mail_group_send_final, pattern="^mail_group_send$"),
            CallbackQueryHandler(mail_command, pattern="^mail_main$")
        ],

        # –†–∞—Å—Å—ã–ª–∫–∞ –æ–¥–Ω–æ–º—É
        MAIL_ONE_CHOOSEUSER: [
            CallbackQueryHandler(mail_one_user_chosen, pattern="^mail_one_user:"),
            CallbackQueryHandler(mail_command, pattern="^mail_main$")
        ],
        MAIL_ONE_SUBJECT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, mail_one_subject_handler),
            CallbackQueryHandler(mail_command, pattern="^mail_main$")
        ],
        MAIL_ONE_BODY: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, mail_one_body_handler),
            CallbackQueryHandler(mail_command, pattern="^mail_main$")
        ],
        MAIL_ONE_ATTACHMENT: [
            MessageHandler(filters.Document.ALL | filters.PHOTO, mail_one_file_handler),
            CallbackQueryHandler(mail_one_skipfile, pattern="^mail_one_skipfile$"),
            CallbackQueryHandler(mail_one_attach_test, pattern="^mail_one_attach_test$"),
            CallbackQueryHandler(mail_command, pattern="^mail_main$")
        ],
        MAIL_ONE_ATTACH_TEST: [
            CallbackQueryHandler(mail_one_test_selected, pattern="^test_select_one:"),
            CallbackQueryHandler(mail_one_body_back, pattern="^mail_one_body_back$")
        ],
        MAIL_ONE_PREVIEW: [
            CallbackQueryHandler(mail_one_send_final, pattern="^mail_one_send$"),
            CallbackQueryHandler(mail_command, pattern="^mail_main$")
        ],

        # –¢–µ—Å—Ç—ã
        TEST_MENU: [
            CallbackQueryHandler(show_tests_menu, pattern="^mail_tests$"),
            CallbackQueryHandler(test_view_handler, pattern="^test_view:"),
            CallbackQueryHandler(test_delete_handler, pattern="^test_delete:"),
            CallbackQueryHandler(test_create_menu_handler, pattern="^test_create_menu$"),
            CallbackQueryHandler(mail_command, pattern="^mail_main$")
        ],
        TEST_CREATE_MENU: [
            CallbackQueryHandler(test_create_group, pattern="^test_create_group$"),
            CallbackQueryHandler(test_create_user, pattern="^test_create_user$"),
            CallbackQueryHandler(test_create_storage, pattern="^test_create_storage$"),
            CallbackQueryHandler(show_tests_menu, pattern="^mail_tests$")
        ],
        TEST_CREATE_HEADER: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, test_create_header_handler)
        ],
        TEST_CREATE_LINK: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, test_create_link_handler)
        ],
        TEST_CREATE_CONFIRM: [
            CallbackQueryHandler(test_create_confirm_handler, pattern="^(test_create_confirm_yes|test_create_confirm_no)$")
        ]
    },
    fallbacks=[],
    allow_reentry=True
)
