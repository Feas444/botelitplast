import os
import logging
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import BASE_DIR
from db import get_role
from telegram.error import BadRequest

logger = logging.getLogger(__name__)

def get_short_id(context, rel_path: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Ç—å rel_path –≤ context.user_data["path_map"][short_id]."""
    if "path_map" not in context.user_data:
        context.user_data["path_map"] = {}
    short_id = uuid.uuid4().hex[:8]
    context.user_data["path_map"][short_id] = rel_path
    return short_id

async def safe_edit_menu(query, text: str, markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ,
    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "Message is not modified".
    """
    try:
        await query.edit_message_text(text=text, reply_markup=markup)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            return
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.delete()
        except Exception:
            pass
        if markup:
            await query.message.chat.send_message(text, reply_markup=markup)
        else:
            await query.message.chat.send_message(text)

async def browse_directory(query, context: ContextTypes.DEFAULT_TYPE,
                           rel_path: str, is_admin: bool, allowed_root: str):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (BASE_DIR/rel_path):
      - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É—è –∫–Ω–æ–ø–∫–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ ID.
      - –ï—Å–ª–∏ rel_path != allowed_root, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥", –∏–Ω–∞—á–µ "üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
      - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ context.user_data["current_dir"].
    """
    full_path = os.path.join(BASE_DIR, rel_path)
    if not os.path.isdir(full_path):
        await safe_edit_menu(query, f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /{rel_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    context.user_data["current_dir"] = rel_path

    try:
        items = sorted(os.listdir(full_path))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {full_path}: {e}")
        await safe_edit_menu(query, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ /{rel_path}.")
        return

    dirs = []
    files = []
    for item in items:
        item_full = os.path.join(full_path, item)
        if os.path.isdir(item_full):
            dirs.append(item)
        elif os.path.isfile(item_full):
            files.append(item)

    keyboard = []
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–ø–æ–∫
    for d in dirs:
        new_rel = os.path.join(rel_path, d)
        short_id = get_short_id(context, new_rel)
        keyboard.append([InlineKeyboardButton(f"üìÅ {d}", callback_data=f"dir|{short_id}")])
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    for f in files:
        file_rel = os.path.join(rel_path, f)
        short_id = get_short_id(context, file_rel)
        keyboard.append([InlineKeyboardButton(f"üìÑ {f}", callback_data=f"file|{short_id}")])

    if not dirs and not files:
        text = f"üìÇ –ü–∞–ø–∫–∞ /{rel_path} –ø—É—Å—Ç–∞."
    else:
        text = f"üìÅ –ü–∞–ø–∫–∞: /{rel_path}"

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –º–µ–Ω—é
    if rel_path != allowed_root:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="files_back")])
    else:
        keyboard.append([InlineKeyboardButton("üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    await safe_edit_menu(query, text, InlineKeyboardMarkup(keyboard))

async def directory_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø–∞–ø–∫—É: callback_data —Ñ–æ—Ä–º–∞—Ç–∞ "dir|<short_id>"."""
    query = update.callback_query
    await query.answer()
    try:
        _, short_id = query.data.split("|", 1)
    except ValueError:
        await query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏!", show_alert=True)
        return
    path_map = context.user_data.get("path_map", {})
    new_rel = path_map.get(short_id)
    if not new_rel:
        await query.answer("‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    user_id = query.from_user.id
    role = get_role(user_id) or ""
    is_admin = (role.lower() == "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    allowed_root = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else role
    await browse_directory(query, context, new_rel, is_admin, allowed_root)

async def file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ñ–∞–π–ª: callback_data "file|<short_id>". –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∏ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()
    try:
        _, short_id = query.data.split("|", 1)
    except ValueError:
        await query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–π–ª–∞!", show_alert=True)
        return
    path_map = context.user_data.get("path_map", {})
    file_rel = path_map.get(short_id)
    if not file_rel:
        await query.answer("‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    full_path = os.path.join(BASE_DIR, file_rel)
    if not os.path.isfile(full_path):
        await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        with open(full_path, "rb") as f:
            await context.bot.send_document(chat_id=query.message.chat_id, document=f, filename=os.path.basename(full_path))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {full_path}: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞!", show_alert=True)
        return
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ)
    user_id = query.from_user.id
    role = get_role(user_id) or ""
    is_admin = (role.lower() == "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    allowed_root = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else role
    parent_dir = os.path.dirname(file_rel)
    await browse_directory(query, context, parent_dir or allowed_root, is_admin, allowed_root)

async def files_back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´üîô –ù–∞–∑–∞–¥¬ª: –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ. –ï—Å–ª–∏ —É–∂–µ –≤ –∫–æ—Ä–Ω–µ, –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    role = get_role(user_id) or ""
    is_admin = (role.lower() == "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    allowed_root = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else role
    current_dir = context.user_data.get("current_dir", "")
    if not current_dir or current_dir == allowed_root:
        # –£–∂–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ ‚Äì –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await safe_edit_menu(
            query,
            "üö™ –í—ã —É–∂–µ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.",
            InlineKeyboardMarkup([[InlineKeyboardButton("üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
        return
    # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –ø–æ –ø—É—Ç–∏
    parent_dir = os.path.dirname(current_dir)
    if not parent_dir:
        parent_dir = allowed_root
    await browse_directory(query, context, parent_dir, is_admin, allowed_root)

# -------------------- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –•–ï–ù–î–õ–ï–†–´ (–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤) --------------------

async def handle_files_obshaya(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É ¬´–û–±—â–∞—è¬ª (–æ–±—â–∏–µ —Ñ–∞–π–ª—ã)."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    role = get_role(user_id) or ""
    is_admin = (role.lower() == "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    allowed_root = "–û–±—â–∞—è"
    rel_path = "–û–±—â–∞—è"
    await browse_directory(query, context, rel_path, is_admin, allowed_root)

async def handle_files_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É –ø–æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (¬´–§–∞–π–ª—ã —Ä–∞–±–æ—Ç—ã¬ª), –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äì –ø–∞–ø–∫–∞ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    role = get_role(user_id) or ""
    is_admin = (role.lower() == "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    if is_admin:
        start_path = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        allowed_root = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    else:
        if not role:
            await query.message.reply_text("–£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω–∞ —Ä–æ–ª—å, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
            return
        start_path = role
        allowed_root = role
    await browse_directory(query, context, start_path, is_admin, allowed_root)
