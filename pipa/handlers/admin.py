# admin.py

import os
import sys
import asyncio
import shutil
import logging
import random
import string

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from db import (
    get_all_users, get_role, delete_user,
    get_all_tests, insert_email
)
from config import DEVELOPER_USERNAME, BASE_DIR, ROLES

logger = logging.getLogger(__name__)

############################
# –°–æ—Å—Ç–æ—è–Ω–∏—è
############################
ADMIN_MENU = 500
ADMIN_ASK_BROADCAST = 501

ADMIN_FILES_BROWSE = 600
ADMIN_FILES_UPLOAD = 601
ADMIN_FILES_UPLOAD_ASK_TEST = 602
ADMIN_FILES_UPLOAD_CHOOSE_TEST = 603

############################
# –£—Ç–∏–ª–∏—Ç—ã
############################
def is_admin_or_dev(update: Update) -> bool:
    user = update.callback_query.from_user if update.callback_query else update.effective_user
    role = (get_role(user.id) or "").lower()
    dev_name = (user.username or "").lower()
    return (role in ("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ø–æ–º–æ—â–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞")) or (dev_name == DEVELOPER_USERNAME.lower())

def short_id(context: ContextTypes.DEFAULT_TYPE, name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –∏ —Ö—Ä–∞–Ω–∏–º ¬´short ‚Üí name¬ª –≤ user_data."""
    sid = ''.join(random.choices(string.ascii_letters+string.digits, k=8))
    context.user_data.setdefault("short_map", {})[sid] = name
    return sid

def restore_id(context: ContextTypes.DEFAULT_TYPE, sid: str) -> str|None:
    return context.user_data.get("short_map", {}).get(sid)

def get_top_role_folder(rel_path: str) -> str|None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ä–æ–ª–∏, –µ—Å–ª–∏ ¬´–≤–µ—Ä—Ö–Ω—è—è –ø–∞–ø–∫–∞¬ª –∏–∑ rel_path —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ ROLES (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ "./" –∏–ª–∏ ".\".

    –ü—Ä–∏–º–µ—Ä:
      rel_path = "./–ü–æ–º–æ—â–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞/–ø–∞–ø–∫–∞1"
      ‚Üí –≤–µ—Ä–Ω—ë—Ç "–ü–æ–º–æ—â–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞", –µ—Å–ª–∏ –≤ ROLES –µ—Å—Ç—å "–ü–æ–º–æ—â–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"
    """
    if not rel_path or rel_path == ".":
        return None

    # –£–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–µ "./" –∏–ª–∏ ".\":
    if rel_path.startswith("./") or rel_path.startswith(".\\"):
        rel_path = rel_path[2:]  # –æ—Ç—Ä–µ–∑–∞–µ–º –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª—ç—à–∏
    rel_path = rel_path.replace("\\", "/").strip().lstrip("/")
    if not rel_path:
        return None

    # –ü–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
    parts = rel_path.split("/")
    top = parts[0].strip()

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    top_lower = top.lower()

    for r in ROLES:  # ROLES –∏–∑ config.py
        if r.lower() == top_lower:
            return r

    return None

def notify_role_about_file(role: str, filename: str, test_id=None):
    """–°–æ–∑–¥–∞—ë–º ¬´–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ¬ª –ø–∏—Å—å–º–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ–≥–æ —Ä–æ–ª—å=role."""
    from db import get_all_users, insert_email
    allu = get_all_users()
    for (tid, nm, un, rl) in allu:
        if (rl or "").lower() == role.lower():
            subj = "–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª"
            body = f"–í –ø–∞–ø–∫—É —Ä–æ–ª–∏ '{role}' –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª '{filename}'."
            if test_id:
                body += f"\n–ö –Ω–µ–º—É –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω —Ç–µ—Å—Ç ID={test_id}."
            insert_email(tid, subj, body, None, test_id)

############################
# 1) –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
############################
async def return_to_main_menu_after_admin(query, context):
    from db import get_role
    from handlers.keyboards import get_admin_keyboard, get_user_keyboard
    user_id = query.from_user.id
    role = (get_role(user_id) or "").lower()
    dev_name = (query.from_user.username or "").lower()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ (–∏–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞, –∏–ª–∏ dev)
    is_admin_or_pom = (role in ("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ø–æ–º–æ—â–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞") or dev_name == "zxcegorka4")

    if is_admin_or_pom:
        text = f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–æ–ª–∏: {role}"
        markup = get_admin_keyboard()
    else:
        text = f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–æ–ª–∏: {role}"
        markup = get_user_keyboard(role)

    try:
        await query.edit_message_text(text, reply_markup=markup)
    except:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(text, reply_markup=markup)

async def admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    if not is_admin_or_dev(update):
        if update.message:
            await update.message.reply_text("üö´ –ù–µ—Ç –ø—Ä–∞–≤.")
        else:
            await update.callback_query.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return ConversationHandler.END
    return await show_admin_menu(update, context)

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = (get_role(update.effective_user.id) or "").lower()
    text = f"üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é (–†–æ–ª—å: {role}):"

    kb = []
    if role == "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        kb.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_restart")])
    kb.append([
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users"),
        InlineKeyboardButton("üí¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    ])
    kb.append([InlineKeyboardButton("üóÇ –§–∞–π–ª—ã", callback_data="admin_files")])
    kb.append([InlineKeyboardButton("üö™ –í—ã—Ö–æ–¥", callback_data="admin_exit")])
    markup = InlineKeyboardMarkup(kb)

    if update.callback_query:
        q = update.callback_query
        await q.answer()
        await q.edit_message_text(text, reply_markup=markup)
    else:
        await update.message.reply_text(text, reply_markup=markup)

    return ADMIN_MENU

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    if data == "admin_restart":
        await q.edit_message_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        await asyncio.sleep(0.3)
        python = os.path.abspath(sys.executable)
        os.execl(python, python, *sys.argv)
        return ConversationHandler.END

    elif data == "admin_users":
        return await show_users_list(update, context)

    elif data.startswith("reset_"):
        uid_str = data.split("_",1)[1]
        try:
            uid = int(uid_str)
            delete_user(uid)
            await q.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Å–±—Ä–æ—à–µ–Ω.")
        except:
            await q.answer("–û—à–∏–±–∫–∞ ID!", show_alert=True)
        return await show_users_list(update, context)

    elif data == "admin_broadcast":
        await q.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        return ADMIN_ASK_BROADCAST

    elif data == "admin_files":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–π–ª–æ–≤–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await q.edit_message_text("–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞...")
        context.user_data["fm_chat_id"] = q.message.chat_id
        context.user_data["fm_message_id"] = q.message.message_id
        return await fm_browse(update, context, ".")

    elif data == "admin_exit":
        from .admin import return_to_main_menu_after_admin
        await return_to_main_menu_after_admin(q, context)
        return ConversationHandler.END


    else:
        await q.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return ADMIN_MENU

async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    from db import get_all_users
    us = get_all_users()
    text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    kb = []
    for (tid, nm, un, rl) in us:
        text += f"{tid} | {nm} (@{un}) | {rl}\n"
        kb.append([InlineKeyboardButton(f"–°–±—Ä–æ—Å–∏—Ç—å {nm}", callback_data=f"reset_{tid}")])
    kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_exit")])
    await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb))
    return ADMIN_MENU

async def admin_broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    from db import get_all_users, insert_email
    for (tid, nm, un, rl) in get_all_users():
        try:
            insert_email(tid, "–†–∞—Å—Å—ã–ª–∫–∞", txt, None, None)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ {tid}: {e}")
    await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    return await admin_panel_command(update, context)

async def force_end_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("–ü—Ä–µ—Ä–≤–∞–Ω–æ.")
    else:
        await update.callback_query.answer("–ü—Ä–µ—Ä–≤–∞–Ω–æ", show_alert=True)
    return ConversationHandler.END

############################
# 2) –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
############################

def get_main_fm_msg(context):
    return context.user_data.get("fm_chat_id"), context.user_data.get("fm_message_id")

async def fm_browse(update: Update, context: ContextTypes.DEFAULT_TYPE, rel_path: str):
    context.user_data["fm_curdir"] = rel_path
    bot = context.bot
    chat_id, msg_id = get_main_fm_msg(context)
    abs_path = os.path.join(BASE_DIR, rel_path)

    if not os.path.isdir(abs_path):
        kb = [[InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data="fm_exit")]]
        await bot.edit_message_text(
            chat_id=chat_id, message_id=msg_id,
            text=f"–ü–∞–ø–∫–∞ /{rel_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return ADMIN_FILES_BROWSE

    items = sorted(os.listdir(abs_path))
    dirs, files = [], []

    for it in items:
        # 1) –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É "pipa" (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–∫–∏)
        if it.lower() == "pipa":
            continue

        fp = os.path.join(abs_path, it)
        if os.path.isdir(fp):
            dirs.append(it)
        else:
            files.append(it)

    # –¥–∞–ª—å—à–µ –≤—Å—ë –∫–∞–∫ —É –≤–∞—Å
    kb = []
    for d in dirs:
        sid = short_id(context, d)
        kb.append([
            InlineKeyboardButton(f"üìÅ {d}", callback_data=f"fm_goto|{sid}"),
            InlineKeyboardButton("üóë", callback_data=f"fm_rmdir|{sid}")
        ])
        
    for f in files:
        sf = short_id(context, f)
        kb.append([InlineKeyboardButton(f"üìÑ {f}", callback_data=f"fm_file|{sf}")])

    row = [InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="fm_upload")]
    if rel_path != ".":
        row.append(InlineKeyboardButton("üîº –í–≤–µ—Ä—Ö", callback_data="fm_updir"))
    kb.append(row)
    kb.append([InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data="fm_exit")])

    text = f"–ü–∞–ø–∫–∞: /{rel_path}"
    markup = InlineKeyboardMarkup(kb)
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=msg_id,
        text=text,
        reply_markup=markup
    )
    return ADMIN_FILES_BROWSE

async def fm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    bot = context.bot
    await q.answer()
    data = q.data
    cur = context.user_data.get("fm_curdir", ".")

    if data == "fm_exit":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        return await show_admin_menu(update, context)

    elif data == "fm_updir":
        parent = os.path.dirname(cur) or "."
        return await fm_browse(update, context, parent)

    elif data.startswith("fm_goto|"):
        sid = data.split("|", 1)[1]
        folder_name = restore_id(context, sid)
        if folder_name:
            newp = os.path.join(cur, folder_name)
            return await fm_browse(update, context, newp)
        else:
            await q.message.reply_text("–û—à–∏–±–∫–∞ –ø–∞–ø–∫–∏!")
        return ADMIN_FILES_BROWSE

    elif data.startswith("fm_rmdir|"):
        sid = data.split("|", 1)[1]
        folder_name = restore_id(context, sid)
        if folder_name:
            fullp = os.path.join(BASE_DIR, cur, folder_name)
            try:
                shutil.rmtree(fullp)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ {folder_name}: {e}")
        return await fm_browse(update, context, cur)

    elif data.startswith("fm_file|"):
        fid = data.split("|", 1)[1]
        fname = restore_id(context, fid)
        text = f"–§–∞–π–ª: /{os.path.join(cur, fname)}"
        kb = [
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"fm_file_del|{fid}"),
             InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å", callback_data=f"fm_file_dl|{fid}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="fm_back")]
        ]
        await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb))
        return ADMIN_FILES_BROWSE

    elif data.startswith("fm_file_del|"):
        fid = data.split("|", 1)[1]
        fname = restore_id(context, fid)
        if fname:
            fullf = os.path.join(BASE_DIR, cur, fname)
            try:
                os.remove(fullf)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {fullf}: {e}")
        return await fm_browse(update, context, cur)

    elif data.startswith("fm_file_dl|"):
        await q.answer("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", show_alert=True)
        return ADMIN_FILES_BROWSE

    elif data == "fm_back":
        return await fm_browse(update, context, cur)

    elif data == "fm_upload":
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ¬´—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö¬ª
        context.user_data["fm_uploaded_list"] = []
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º ¬´–≥–ª–∞–≤–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø–æ–∫–∞–∂–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        await fm_update_upload_text(context, None, None)
        return ADMIN_FILES_UPLOAD


    else:
        await q.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –§–ú.")
        return ADMIN_FILES_BROWSE

############################
# 3) –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–ª–∏, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞, –∏ —É–±—Ä–∞—Ç—å –º–µ–Ω—é
############################

async def fm_upload_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_in = (update.message.text or "").lower().strip()
    cur = context.user_data.get("fm_curdir", ".")

    # 1) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª ¬´–≥–æ—Ç–æ–≤–æ¬ª => —Å–ø—Ä–∞—à–∏–≤–∞–µ–º ¬´–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ—Å—Ç?¬ª
    if text_in in ["–≥–æ—Ç–æ–≤–æ", "done"]:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–≥–æ—Ç–æ–≤–æ"
        try:
            await update.message.delete()
        except:
            pass
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ ¬´–î–∞/–ù–µ—Ç¬ª –≤ —Ç–æ–º –∂–µ ¬´–≥–ª–∞–≤–Ω–æ–º¬ª —Å–æ–æ–±—â–µ–Ω–∏–∏
        kb = [
            [InlineKeyboardButton("–î–∞", callback_data="fm_attachtest_yes"),
             InlineKeyboardButton("–ù–µ—Ç", callback_data="fm_attachtest_no")]
        ]
        await fm_update_upload_text(context, "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ—Å—Ç?", kb)
        return ADMIN_FILES_UPLOAD_ASK_TEST

    # 2) –ò–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
    doc = update.message.document
    photos = update.message.photo
    video = update.message.video  # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ

    basep = os.path.join(BASE_DIR, cur)
    os.makedirs(basep, exist_ok=True)

    saved_name = None

    if doc:
        fobj = await context.bot.get_file(doc.file_id)
        fname = doc.file_name or f"doc_{doc.file_unique_id}"
        fullp = os.path.join(basep, fname)
        await fobj.download_to_drive(fullp)
        saved_name = fname

    elif photos:
        ph = photos[-1]
        fobj = await context.bot.get_file(ph.file_id)
        fname = f"photo_{ph.file_unique_id}.jpg"
        fullp = os.path.join(basep, fname)
        await fobj.download_to_drive(fullp)
        saved_name = fname

    elif video:
        fobj = await context.bot.get_file(video.file_id)
        fname = f"video_{video.file_unique_id}.mp4"
        fullp = os.path.join(basep, fname)
        await fobj.download_to_drive(fullp)
        saved_name = fname

    if saved_name:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —Å–∞–º–∏–º —Ñ–∞–π–ª–æ–º)
        try:
            await update.message.delete()
        except:
            pass

        # –û–ø–æ–≤–µ—â–∞–µ–º —Ä–æ–ª—å (–∫–∞–∫ –±—ã–ª–æ)
        role_top = get_top_role_folder(cur)
        if role_top:
            notify_role_about_file(role_top, saved_name, test_id=None)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ user_data["fm_uploaded_list"]
        context.user_data.setdefault("fm_uploaded_list", [])
        context.user_data["fm_uploaded_list"].append(saved_name)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å ¬´–µ—â—ë –æ–¥–∏–Ω —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω¬ª
        await fm_update_upload_text(context, None, None)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ => –≥–æ–≤–æ—Ä–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ ¬´–≥–æ—Ç–æ–≤–æ¬ª.")
    return ADMIN_FILES_UPLOAD


async def fm_update_upload_text(context: ContextTypes.DEFAULT_TYPE, override_text: str|None, override_kb):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç ¬´–≥–ª–∞–≤–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç/—Å–æ–æ–±—â–µ–Ω–∏–∏ fm_chat_id/fm_message_id,
    —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

    override_text ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç.
    override_kb   ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë.
                    –ò–Ω–∞—á–µ —Å—Ç–∞–≤–∏–º None (–Ω–µ—Ç –∫–Ω–æ–ø–æ–∫).
    """
    bot = context.bot
    fm_chat = context.user_data.get("fm_chat_id")
    fm_msg = context.user_data.get("fm_message_id")
    if not fm_chat or not fm_msg:
        return  # –ù–µ –∑–Ω–∞–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.

    if override_text is not None:
        # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        new_text = override_text
    else:
        # –ò–Ω–∞—á–µ —Å—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        cur = context.user_data.get("fm_curdir", ".")
        uploaded_list = context.user_data.get("fm_uploaded_list", [])
        lines = [f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ /{cur}."]
        if uploaded_list:
            lines.append("–£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:")
            for f in uploaded_list:
                lines.append(f" ‚Ä¢ {f}")
        else:
            lines.append("(–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ)")
        lines.append("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–≥–æ—Ç–æ–≤–æ¬ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        new_text = "\n".join(lines)

    # –ì–æ—Ç–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if override_kb is not None:
        kb = override_kb
    else:
        kb = []

    from telegram import InlineKeyboardMarkup
    try:
        await bot.edit_message_text(
            chat_id=fm_chat,
            message_id=fm_msg,
            text=new_text,
            reply_markup=InlineKeyboardMarkup(kb) if kb else None
        )
    except:
        pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –¥—Ä. –æ—à–∏–±–∫–∞


async def fm_upload_asktest_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    if data == "fm_attachtest_no":
        # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ ConversationHandler.END
        # –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        cur = context.user_data.get("fm_curdir", ".")
        # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —Å–±—Ä–æ—Å—å—Ç–µ —Å–ø–∏—Å–æ–∫ "fm_uploaded_list"
        context.user_data.pop("fm_uploaded_list", None)
        return await fm_browse(update, context, cur)

    else:
        # data == "fm_attachtest_yes"
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        tests = get_all_tests()
        kb = []
        if tests:
            for (tid, header, link, fg, rl, uid, attach_id) in tests:
                sid = short_id(context, str(tid))
                kb.append([InlineKeyboardButton(f"üìù {header}", callback_data=f"fm_testchoose:{sid}")])
        else:
            kb.append([InlineKeyboardButton("–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤", callback_data="fm_testnone")])
        kb.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="fm_attachtest_no")])
        await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(kb))
        return ADMIN_FILES_UPLOAD_CHOOSE_TEST


async def fm_upload_test_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    test_str = q.data.split(":",1)[1]
    real = restore_id(context, test_str)
    if real:
        test_id = int(real)
        lastf = context.user_data.get("last_uploaded_file","")
        cur = context.user_data.get("fm_curdir",".")
        role_top = get_top_role_folder(cur)
        if role_top:
            from db import get_all_users, insert_email
            for (tid, nm, un, rl) in get_all_users():
                if (rl or "").lower() == role_top.lower():
                    subj = f"–§–∞–π–ª + –¢–µ—Å—Ç: {lastf}"  # –∏–ª–∏ "–§–∞–π–ª + –¢–µ—Å—Ç –≤ –í–æ–¥–∏—Ç–µ–ª—å: {lastf}"
                    body = (
                        f"–ö —Ñ–∞–π–ª—É '{lastf}' –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω —Ç–µ—Å—Ç (ID={test_id}).\n"
                    "–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ—á–∏—Ç–∞–Ω–æ¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç."
                    )
                    insert_email(tid, subj, body, None, test_id)
        await q.message.edit_text(f"–¢–µ—Å—Ç {test_id} –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ '{lastf}'. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–æ–ª–∏ {role_top}.\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–ø–∏—Å–æ–∫...")
    
    # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    cur = context.user_data.get("fm_curdir", ".")
    context.user_data.pop("fm_uploaded_list", None)
    return await fm_browse(update, context, cur)


async def fm_upload_test_none(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.edit_text("–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è.\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–ø–∏—Å–æ–∫...")

    cur = context.user_data.get("fm_curdir", ".")
    context.user_data.pop("fm_uploaded_list", None)
    return await fm_browse(update, context, cur)


async def fm_upload_test_none(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    # –£–¥–∞–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ => –º–µ–Ω—é –ø—Ä–æ–ø–∞–¥–∞–µ—Ç
    fm_chat = context.user_data.get("fm_chat_id")
    fm_msg = context.user_data.get("fm_message_id")
    if fm_chat and fm_msg:
        try:
            await q.message.bot.delete_message(fm_chat, fm_msg)
        except:
            pass
    await q.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤).")
    return ConversationHandler.END

############################
# ConversationHandler
############################
admin_conv = ConversationHandler(
    entry_points=[
        CommandHandler("admin", admin_panel_command),
        CallbackQueryHandler(admin_panel_command, pattern="^admin_panel$")
    ],
    states={
        # –ê–¥–º–∏–Ω-–º–µ–Ω—é
        ADMIN_MENU: [
            CallbackQueryHandler(
                admin_menu_handler,
                pattern="^(admin_restart|admin_users|admin_broadcast|admin_files|admin_exit|reset_.*)$"
            )
        ],
        # –†–∞—Å—Å—ã–ª–∫–∞
        ADMIN_ASK_BROADCAST: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_text)
        ],
        # –§–ú
        ADMIN_FILES_BROWSE: [
            CallbackQueryHandler(
                fm_handler,
                pattern="^(fm_exit|fm_updir|fm_goto\\|.*|fm_rmdir\\|.*|fm_file\\|.*|fm_file_del\\|.*|fm_file_dl\\|.*|fm_back|fm_upload)$"
            )
        ],
        ADMIN_FILES_UPLOAD: [
            MessageHandler(filters.Document.ALL | filters.PHOTO | filters.VIDEO | filters.TEXT, fm_upload_receive)

        ],
        ADMIN_FILES_UPLOAD_ASK_TEST: [
            CallbackQueryHandler(fm_upload_asktest_handler, pattern="^(fm_attachtest_yes|fm_attachtest_no)$")
        ],
        ADMIN_FILES_UPLOAD_CHOOSE_TEST: [
            CallbackQueryHandler(fm_upload_test_chosen, pattern="^fm_testchoose:"),
            CallbackQueryHandler(fm_upload_test_none, pattern="^fm_testnone$"),
            CallbackQueryHandler(fm_upload_asktest_handler, pattern="^fm_attachtest_no$")
        ]
    },
    fallbacks=[
        CommandHandler("start", force_end_admin),
        CommandHandler("admin", force_end_admin),
    ]
)
